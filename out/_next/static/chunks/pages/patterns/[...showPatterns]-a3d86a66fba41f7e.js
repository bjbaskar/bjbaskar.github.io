(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[45],{652:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/patterns/[...showPatterns]",function(){return t(1807)}])},8419:function(n,e,t){"use strict";t.d(e,{Z:function(){return v}});var r=t(5893),o=t(7294),s=t(1163),a=t(2010),i=t(1664),c=t.n(i);let l=()=>(0,r.jsx)("div",{className:"flex text-gray-500 hover:text-gray-600 transition items-center justify-center mx-auto w-full mb-8",children:(0,r.jsx)(u,{href:"//bjbaskar.github.io/",children:"Copyright \xa9 Baskaran Balaganesan ".concat(new Date().getFullYear())})}),u=n=>{let{href:e,children:t}=n;return(0,r.jsx)("a",{className:"text-gray-500 hover:text-gray-600 transition",target:"_blank",rel:"noopener noreferrer",href:e,children:t})};function d(){return(0,r.jsxs)("div",{className:"bg-gray-800 mt-8 pt-8 w-full",children:[(0,r.jsx)("footer",{className:"flex flex-col justify-center items-start max-w-2xl mx-auto w-full mb-8",children:(0,r.jsxs)("div",{className:"w-full grid grid-cols-1 gap-4 pb-16 sm:grid-cols-3",children:[(0,r.jsxs)("div",{className:"flex flex-col gap-4",children:[(0,r.jsx)(c(),{href:"/",className:"text-gray-500 hover:text-gray-600 transition",children:"Home"}),(0,r.jsx)(c(),{href:"/about",className:"text-gray-500 hover:text-gray-600 transition",children:"About"}),(0,r.jsx)(c(),{href:"/techstack",className:"text-gray-500 hover:text-gray-600 transition",children:"Technical Stack"})]}),(0,r.jsxs)("div",{className:"flex flex-col gap-4",children:[(0,r.jsx)(u,{href:"https://www.linkedin.com/in/bjbaskar/",children:"LinkedIn"}),(0,r.jsx)(u,{href:"https://github.com/bjbaskar",children:"GitHub"}),(0,r.jsx)(u,{href:"https://twitter.com/bjbaskar",children:"Twitter"})]}),(0,r.jsxs)("div",{className:"flex flex-col gap-4",children:[(0,r.jsx)(u,{href:"https://stackoverflow.com/users/2075914/bjbaskar",children:"Stack Overflow"}),(0,r.jsx)(c(),{href:"/contact",className:"text-gray-500 hover:text-gray-600 transition",children:"Guestbook"}),(0,r.jsx)(c(),{href:"/patterns",className:"text-gray-500 hover:text-gray-600 transition",children:"Snippets"}),(0,r.jsx)(c(),{href:"/contact",className:"text-gray-500 hover:text-gray-600 transition",children:"Contact"})]})]})}),(0,r.jsx)(l,{})]})}var p=t(5820),m=t(6791);let h=[{name:"Home",link:"/"},{name:"Technical Stack",link:"/techstack"},{name:"Work History",link:"/workhistory"},{name:"Patterns",link:"/patterns"},{name:"Contact",link:"/contact"}],b=n=>{let{hoveredIndex:e,setHoveredIndex:t,router:o}=n;return(0,r.jsx)(r.Fragment,{children:h.map((n,s)=>(0,r.jsx)(c(),{href:n.link,children:(0,r.jsxs)("div",{onMouseEnter:()=>t(s),onMouseLeave:()=>t(null),className:"relative rounded-lg px-3 inline-block py-2 text-sm text-gray-700 dark:text-gray-200 transition-all delay-150 hover:text-gray-900 dark:hover:text-gray-900",children:[(0,r.jsx)(p.M,{children:e===s&&(0,r.jsx)(m.E.span,{className:"absolute inset-0 transform bg-gray-50 dark:bg-zinc-900",layoutId:"hoverBackground",initial:{opacity:0},animate:{opacity:1,transition:{duration:.15}},exit:{opacity:0,transition:{duration:.15,delay:.2}}})}),(0,r.jsx)("span",{className:"relative z-10 ".concat(o.asPath===n.link?"text-teal-600":"text-gray-600 dark:text-gray-50"),children:n.name}),o.asPath===n.link&&(0,r.jsx)("span",{className:"absolute inset-x-1 -bottom-px h-px bg-gradient-to-r from-blue-500/0 via-blue-500/40 to-blue-500/0 dark:from-blue-400/0 dark:via-blue-400/40 dark:to-blue-400/0"})]})},n.name))})},g=()=>{var n;let[e,t]=(0,o.useState)(!1),a=(0,s.useRouter)(),i=n=>{t(!1),a.push(n)};return(0,o.useEffect)(()=>{},[e]),(0,r.jsxs)("div",{className:"w-full flex flex-row items-center space-x-2",children:[(0,r.jsx)("button",{onClick:()=>i(h[0].link),className:"relative rounded-lg px-1 py-1 sm:px-4 sm:py-2 text-sm text-gray-50 dark:text-gray-50 transition-all delay-150 hover:text-gray-900 dark:hover:text-gray-900",children:null===(n=h[0])||void 0===n?void 0:n.name}),(0,r.jsx)("button",{onClick:()=>t(!e),className:"p-2 rounded-md bg-gray-200 dark:bg-gray-800",children:(0,r.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:"1.5",stroke:"currentColor",className:"w-6 h-6 text-black dark:text-white",children:(0,r.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"})})}),(0,r.jsx)(p.M,{initial:!1,exitBeforeEnter:!0,onExitComplete:()=>null,children:e&&(0,r.jsx)(m.E.div,{variants:{hidden:{y:"-4vh",opacity:0},visible:{y:"0",opacity:1,transition:{duration:.1,type:"spring",damping:25,stiffness:500}},exit:{y:"4vh",opacity:0}},initial:"hidden",animate:"visible",exit:"exit",className:"absolute inset-x-0 mx-auto top-20 flex flex-col w-[90%] p-4 rounded-lg shadow-xl z-[999] bg-white dark:bg-gray-800 divide-y dark:divide-gray-700",children:[...h].splice(1).map(n=>(0,r.jsx)("button",{onClick:()=>i(n.link),className:"relative font-bold px-1 py-4 sm:px-4 sm:py-2 text-sm text-gray-700 dark:text-gray-200 transition-all delay-150 hover:text-gray-900 dark:hover:text-gray-900 text-left",children:(0,r.jsx)(p.M,{children:(0,r.jsx)("span",{className:"relative z-10",children:n.name})})},null==n?void 0:n.link))})})]})};function v(n){let[e,t]=(0,o.useState)(!1),[i,c]=(0,o.useState)(0),{theme:l,setTheme:u}=(0,a.F)();(0,o.useEffect)(()=>t(!0),[]);let{children:p,...m}=n,h=(0,s.useRouter)();return(0,r.jsxs)("div",{className:"w-full bg-white dark:bg-zinc-900",children:[(0,r.jsxs)("nav",{className:"fixed top-0 z-50 flex justify-between items-center w-full p-8 mx-auto bg-gray-900 dark:bg-zinc-900",children:[(0,r.jsx)("div",{className:"text-xl text-gray-300",children:"<Baskar />"}),(0,r.jsx)("div",{className:"hidden sm:block rounded-full flex-row bg-white/90 px-3 text-sm font-medium text-zinc-800 shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur dark:bg-zinc-900/90 dark:text-zinc-200 dark:ring-white/10",children:(0,r.jsx)(b,{hoveredIndex:i,setHoveredIndex:c,router:h})}),(0,r.jsx)("div",{className:"block sm:hidden mr-2",children:(0,r.jsx)(g,{})}),(0,r.jsx)("button",{"aria-label":"Toggle Dark Mode",type:"button",className:"w-9 h-9 bg-gray-200 rounded-lg dark:bg-gray-600 flex items-center justify-center hover:ring-2 ring-gray-300 transition-all",onClick:()=>u("dark"===l?"light":"dark"),children:e&&(0,r.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",className:"w-5 h-5 text-gray-800 dark:text-gray-200",children:"dark"===l?(0,r.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"}):(0,r.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"})})})]}),(0,r.jsxs)("main",{id:"skip",className:"flex flex-col",children:[p,(0,r.jsx)(d,{})]})]})}},4345:function(n,e,t){"use strict";t.d(e,{D:function(){return s},b:function(){return o}});var r=t(5893);t(7294);let o=n=>{let{title:e}=n;return(0,r.jsx)("h1",{"data-scroll":!0,"data-scroll-speed":"0.5",className:"title text-[40px]",children:e})},s=n=>{let{title:e}=n;return(0,r.jsx)("div",{"data-scroll":!0,"data-scroll-speed":"0.5",className:"text-2xl",children:e})}},4966:function(n,e,t){"use strict";var r=t(5893);t(7294);var o=t(1664),s=t.n(o),a=t(1163);let i=[{text:"Singleton"},{text:"Factory"},{text:"Abstract Factory"},{text:"Builder"},{text:"Prototype"},{text:"Adapter"},{text:"Bridge"},{text:"Composite"},{text:"Decorator"},{text:"Facade"},{text:"Flyweight"},{text:"Proxy"},{text:"Chain of Responsibility"},{text:"Command"},{text:"Iterator"},{text:"Mediator"},{text:"Memento"},{text:"Observer"},{text:"State"},{text:"Strategy"},{text:"Template Method"},{text:"Visitor"}],c=n=>{let{text:e}=n,t=(0,a.useRouter)(),o=t.query.showPatterns,i=o?o[0]:"singleton",c=e?e.split(" ").join("").toLowerCase().toLowerCase():"";return(0,r.jsx)(s(),{href:"/patterns/".concat(c),className:i===c?"text-blue-600":"hover:text-orange-600",children:e})},l=()=>(0,r.jsx)("div",{className:"divide-y-2 divide-gray-200 dark:divide-gray-700",children:i.map((n,e)=>(0,r.jsx)("div",{className:"py-4",children:(0,r.jsx)(c,{text:n.text,rowNum:e+1})},n.text))});e.Z=l},1807:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return d}});var r=t(5893),o=t(7294),s=t(1163),a=t(8419),i=t(4966),c=t(4345);let l=n=>{let{children:e}=n;return(0,r.jsxs)(a.Z,{children:[(0,r.jsx)("div",{className:"h-[100px]"}),(0,r.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 px-4 pt-2",children:[(0,r.jsxs)("div",{className:"flex flex-col px-8 w-full space-y-8",children:[(0,r.jsx)(c.D,{title:"Design Patterns"}),(0,r.jsx)(i.Z,{})]}),(0,r.jsx)("div",{className:"flex flex-col px-8 w-full overflow-x-auto border-dotted border-2 border-slate-200 dark:border-slate-700",children:e})]})]})},u='\n// Singleton\nexport class Singleton {\n	private static instance: Singleton;\n\n	private constructor() {\n	}\n\n	public static getInstance(): Singleton {\n		if (!Singleton.instance) {\n			Singleton.instance = new Singleton();\n		}\n		return Singleton.instance;\n	}\n}\n\nconst singleton1 = Singleton.getInstance();\nconst singleton2 = Singleton.getInstance();\n\nif (singleton1 === singleton2) {\n	console.log("Two singleton instances are equivalent");\n} else {\n	console.log("Two singleton instances are not equivalent");\n}\n';function d(){let n=(0,s.useRouter)(),e=n.query.showPatterns,[t,a]=(0,o.useState)(u);return(0,o.useEffect)(()=>{let n=e?e[0]:"singleton";switch(n){case"singleton":default:a(u);break;case"factory":a('\n// Factory Method\ninterface CreditCard {\n	getCardType(): string;\n	getCreditLimit(): number;\n	getAnnualCharges(): number;\n}\n\nclass VisaCard implements CreditCard {\n	public getCardType(): string {\n		return ("Visa Card");\n	}\n	public getCreditLimit(): number {\n		return 20000;\n	}\n	public getAnnualCharges(): number {\n		return 500;\n	}\n}\n\nclass PlatinumCard implements CreditCard {\n	public getCardType(): string {\n		return ("Platinum Card");\n	}\n	public getCreditLimit(): number {\n		return 25000;\n	}\n	public getAnnualCharges(): number {\n		return 600;\n	}\n}\n\nabstract class CardCreator {\n	public abstract cardFactory(): CreditCard;\n\n	public doOperation(): string {\n		const product = this.cardFactory();\n\n		const res = {\n			"Abstract Card Creator": {\n				CardType: product.getCardType(),\n				CreditLimit: product.getCreditLimit(),\n				AnnualCharges: product.getAnnualCharges()\n			}\n		};\n\n		return JSON.stringify(res, null, 2);\n					 \n	}\n}\n\nclass ConcreteCreator extends CardCreator {\n	private key: string = "VISACARD";\n\n	constructor(str: string) {\n		super();\n		this.key = str;\n	}\n\n	public cardFactory(): CreditCard {\n		if (this.key === "VISACARD") {\n			return new VisaCard();\n		} else if (this.key === "PLATINUM") {\n			return new PlatinumCard();\n		}\n		return new VisaCard();\n	}\n}\n\nconst clientCode = (creator: CardCreator) => {\n	console.log("Client: I\'m not aware of creator\'s class");\n	console.log(creator.doOperation());\n}\n\nclientCode(new ConcreteCreator("VISACARD"));\nclientCode(new ConcreteCreator("PLATINUM"));\n');break;case"abstractfactory":a('\n// Abstract Factory\ninterface AbstractProductA {\n	usefulFunctionA(): string;\n}\n\nclass ConcreteProductA1 implements AbstractProductA {\n	public usefulFunctionA(): string {\n		return \'The result of the product A1.\';\n	}\n}\n\nclass ConcreteProductA2 implements AbstractProductA {\n	public usefulFunctionA(): string {\n		return \'The result of the product A2.\';\n	}\n}\n\ninterface AbstractProductB {\n	usefulFunctionB(): string;\n	anotherUsefulFunctionB(collaborator: AbstractProductA): string;\n}\n\nclass ConcreteProductB1 implements AbstractProductB {\n\n	public usefulFunctionB(): string {\n		return \'The result of the product B1.\';\n	}\n\n	public anotherUsefulFunctionB(collaborator: AbstractProductA): string {\n		const result = collaborator.usefulFunctionA();\n		return "The result of the B1 collaborating with the " + {result};\n	}\n}\n\nclass ConcreteProductB2 implements AbstractProductB {\n\n	public usefulFunctionB(): string {\n		return \'The result of the product B2.\';\n	}\n\n	public anotherUsefulFunctionB(collaborator: AbstractProductA): string {\n		const result = collaborator.usefulFunctionA();\n		return "The result of the B2 collaborating with the " + {result} ;\n	}\n}\n\ninterface AbstractFactory {\n	createProductA(): AbstractProductA;\n	createProductB(): AbstractProductB;\n}\n\nclass ConcreteFactory1 implements AbstractFactory {\n	public createProductA(): AbstractProductA {\n		return new ConcreteProductA1();\n	}\n\n	public createProductB(): AbstractProductB {\n		return new ConcreteProductB1();\n	}\n}\n\nclass ConcreteFactory2 implements AbstractFactory {\n	public createProductA(): AbstractProductA {\n		return new ConcreteProductA2();\n	}\n\n	public createProductB(): AbstractProductB {\n		return new ConcreteProductB2();\n	}\n}\n\nconst clientCode = (factory: AbstractFactory) => {\n	const productA = factory.createProductA();\n	const productB = factory.createProductB();\n\n	console.log(productB.usefulFunctionB());\n	console.log(productB.anotherUsefulFunctionB(productA));\n}\n\nconsole.log("=-=-=-=-=-=-=-=-=-=-=-=-=-=");\nclientCode(new ConcreteFactory1());\nconsole.log("=-=-=-=-=-=-=-=-=-=-=-=-=-=");\nclientCode(new ConcreteFactory2());\nconsole.log("=-=-=-=-=-=-=-=-=-=-=-=-=-=");\n');break;case"builder":a('\n// Builder Pattern\ninterface ReportBuilder {\n	setTitle(): void;\n	setHeader(): void;\n	setFooter(): void;\n	setContent(): void;\n}\n\nclass PdfReportBuilder implements ReportBuilder {\n	private name: string;\n	private report: Report | undefined;\n\n	constructor(name: string) {\n		this.name = name;\n		this.reset();\n	}\n\n	reset(): void {\n		this.report = new Report();\n	}\n\n	setTitle(): void {\n		this.report?.parts.push("Show Title");\n	}\n\n	setHeader(): void {\n		this.report?.parts.push("Show Header");\n	}\n\n	setFooter(): void {\n		this.report?.parts.push("Show Footer");\n	}\n\n	setContent(): void {\n		this.report?.parts.push("Show Content");\n	}\n\n	getReport(): Report | undefined {\n		const result = this.report;\n		this.reset();\n		return result;\n	}\n}\n\nclass CsvReportBuilder implements ReportBuilder {\n	private name: string;\n	private report: Report | undefined;\n\n	constructor(name: string) {\n		this.name = name;\n		this.reset();\n	}\n\n	reset(): void {\n		this.report = new Report();\n	}\n\n	setTitle(): void {\n		this.report?.parts.push("Show Title");\n	}\n\n	setHeader(): void {\n		this.report?.parts.push("Show Header");\n	}\n\n	setFooter(): void {\n		this.report?.parts.push("Show Footer");\n	}\n\n	setContent(): void {\n		this.report?.parts.push("Show Content");\n	}\n\n	getReport(): Report | undefined {\n		const result = this.report;\n		this.reset();\n		return result;\n	}\n}\n\nclass Report {\n	public parts: string[] = [];\n\n	public list(): void {\n		console.log("Reports content: " + this.parts.join(", "));\n	}\n}\n\nclass ReportsDirector {\n	private builder: ReportBuilder;\n\n	constructor(builder: ReportBuilder) {\n		this.builder = builder;\n	}\n\n	public setBuilder(builder: ReportBuilder): void {\n		this.builder = builder;\n	}\n\n	public buildPdf(): void {\n		this.builder.setTitle();\n		this.builder.setHeader();\n		this.builder.setContent();\n		this.builder.setFooter();\n	}\n\n	public buildCsv(): void {\n		this.builder.setTitle();\n		this.builder.setContent();\n	}\n}\n\nconst clientCall = () => {\n	const builder = new PdfReportBuilder("PDF");\n\n	console.log("Standard pre-defined way to generate the report");\n	const director = new ReportsDirector(builder);\n	director.buildPdf();\n	builder.getReport()?.list();\n\n	console.log("Custom Report excluding title and header to generate the report");\n	builder.setContent();\n	builder.setFooter();\n	builder.getReport()?.list();\n}\n');break;case"prototype":a('\n// Prototype\ninterface ICloneable {\n	clone(): any;\n}\n\nclass Prototype implements ICloneable {\n	public identity: string = "";\n	public list: Array<number> = [];\n\n	constructor(identity: string) {\n		this.identity = identity;\n\n		for (let i: number = 0; i < 100; i++) {\n			this.list.push(i);\n		}\n	}\n\n	public clone(): Prototype {\n		return Object.assign({}, this);\n	}\n}\n\nconst clientCode = () => {\n	const p1 = new Prototype("Baskaran");\n	let p1_clone = p1.clone();\n\n	console.log(p1.identity === p1_clone.identity);\n	console.log(p1.list[5] === p1_clone.list[5]);\n}\n');break;case"adapter":a('\n// Adapter\nclass Target {\n	public convert(): string {\n		return "This is the default conversion of xml to json";\n	}\n}\n\nclass Adaptee {\n	public getXMLData(): string {\n		return "<employee>\n	<name fname="Baskaran" age = 45 />\n		</employee>";\n	}\n}\n\nclass Adapter extends Target {\n	private adaptee: Adaptee;\n\n	constructor(adaptee: Adaptee) {\n		super();\n		this.adaptee = adaptee;\n	}\n\n	public convert(): string {\n		const legacyData = this.adaptee.getXMLData();\n\n		if (legacyData) {\n			// use logic to convert xml to json\n			const result = {\n				"employee": {\n					name: {\n						fname: "Baskaran",\n						age: 45\n					}\n				}\n			}\n			return JSON.stringify(result, null, 2);\n		}\n		return "";\n	}\n}\n\nconst clientCode = (target: Target) => {\n	console.log(target.convert());\n}\n\nconsole.log("with Target objects");\nconst target = new Target();\nclientCode(target);\n\nconsole.log("=-=-=-=-=-=-=-=-=-=-=");\nconst adaptee = new Adaptee();\nconsole.log("with Adaptee Class");\nconsole.log(adaptee.getXMLData());\n\nconsole.log("=-=-=-=-=-=-=-=-=-=-=");\nconst adapter = new Adapter(adaptee);\nclientCode(adapter);\n');break;case"bridge":a('\n// Bridge PAttern\ninterface Workshop {\n	work(): void;\n}\n\nclass Assemble implements Workshop {\n	public work(): void {\n		console.log("Assemble work...")\n	}\n}\n\nclass Repair implements Workshop {\n	public work(): void {\n		console.log("Repair work...")\n	}\n}\n\nabstract class Vehicle {\n	public _aWorkShop: Workshop;\n	public _rWorkShop: Workshop;\n\n	constructor(assembleWorkshop: Workshop, repairWorkshop: Workshop) {\n		this._aWorkShop = assembleWorkshop;\n		this._rWorkShop = repairWorkshop;\n	}\n\n	public abstract manufacture(): void;\n}\n\nclass Car extends Vehicle {\n	constructor(aWrkShop: Workshop, rWrkShop: Workshop) {\n		super(aWrkShop, rWrkShop);\n	}\n\n	public manufacture(): void {\n		console.log("Car work...")\n		this._aWorkShop.work();\n		this._rWorkShop.work();\n	}\n}\n\nclass Bike extends Vehicle {\n	constructor(aWrkShop: Workshop, rWrkShop: Workshop) {\n		super(aWrkShop, rWrkShop);\n	}\n	public manufacture(): void {\n		console.log("Bike work...")\n		this._aWorkShop.work();\n		this._rWorkShop.work();\n	}\n}\n\nconst clientCode = () => {\n	const assemble = new Assemble();\n	const repair = new Repair();\n\n	const car: Vehicle = new Car(assemble, repair);\n	const bike: Vehicle = new Bike(assemble, repair);\n\n	car.manufacture();\n	bike.manufacture();\n}\n');break;case"composite":a('\n// Composite\nabstract class EmployeeComponent {\n	abstract getName(): string;\n	abstract getRole(): string;\n	abstract getSalary(): number;\n\n	private parent: EmployeeComponent | null | undefined = undefined;\n\n	public setParent(parent: EmployeeComponent | null | undefined) {\n		this.parent = parent;\n	}\n\n	public getParent(): EmployeeComponent | undefined | null {\n		return this.parent;\n	}\n\n	public isComposite(): boolean {\n		return false;\n	}\n}\n\nclass Employee extends EmployeeComponent {\n	private name: string;\n	private role: string;\n	private salary: number;\n\n	constructor(name: string, role: string, salary: number) {\n		super();\n		this.name = name;\n		this.role = role;\n		this.salary = salary;\n	}\n\n	getName(): string {\n		return this.name;\n	}\n\n	getRole(): string {\n		return this.role;\n	}\n\n	getSalary(): number {\n		return this.salary;\n	}\n\n	isComposite(): boolean {\n		return false;\n	}\n}\n\nclass CompositeEmployee extends EmployeeComponent {\n	private name: string;\n	private role: string = "";\n	private salary: number = 0;\n	private children: Array<EmployeeComponent> = [];\n\n	constructor(name: string, role: string, salary: number) {\n		super();\n		this.name = name;\n		this.role = role;\n		this.salary = salary;\n		this.children = new Array<EmployeeComponent>();\n	}\n\n	public getName(): string {\n		return this.name;\n	}\n\n	public getRole(): string {\n		return this.role;\n	}\n\n	public getSalary(): number {\n		let sal: number = 0;\n		for (let child of this.children) {\n			let cSalary: number = child.getSalary();\n			let p_sal: number = cSalary;\n			sal += p_sal;\n		}\n		if (this.isComposite()) {\n			sal += this.salary;\n		}\n		return sal;\n	}\n\n	public isComposite(): boolean {\n		return true;\n	}\n\n	public addEmployee(comp: EmployeeComponent) {\n		this.children.push(comp);\n		comp.setParent(this);\n	}\n\n	public removeEmployee(comp: EmployeeComponent) {\n		const compIndex = this.children.indexOf(comp);\n		this.children.splice(compIndex, 1);\n		comp.setParent(null);\n	}\n\n	public showTeam(): Array<EmployeeComponent> {\n		const res = this.children;\n		return res;\n	}\n}\n\nconst clientCode = (comp: EmployeeComponent) => {\n	console.log("Result => " +  comp.getName()  + " " +   comp.getRole());\n}\n\nconst Unit1_Lead = new CompositeEmployee("P1", "lead", 60);\nconst dev1 = new Employee("p1-d1", "dev", 30);\nconst dev2 = new Employee("p1-d2", "dev", 20);\n\nUnit1_Lead.addEmployee(dev1);\nUnit1_Lead.addEmployee(dev2);\n\nconst Unit2_Lead = new CompositeEmployee("P11", "lead", 350);\nconst dev21 = new Employee("p11-d1", "dev", 40);\nconst dev22 = new Employee("p11-d2", "dev", 30);\n\nUnit2_Lead.addEmployee(dev21);\nUnit2_Lead.addEmployee(dev22);\n\nconst manager = new CompositeEmployee("top", "manager", 80)\nmanager.addEmployee(Unit1_Lead);\nmanager.addEmployee(Unit2_Lead);\n\nclientCode(manager);\nconsole.log("Unit1_Lead Total salary => " + Unit1_Lead.getSalary() );\nconsole.log("Unit2_Lead Total salary => " + Unit2_Lead.getSalary()  );\nconsole.log("manager Total salary => "  + manager.getSalary()  );\nconsole.log(manager.showTeam());\n');break;case"decorator":a('\n// Decorator\ninterface ICar {\n	getDesc(): string;\n	getPrice(): number;\n}\n\nclass MaruthiCar implements ICar {\n	private description: string = "";\n	private price: number = 0;\n\n	constructor(desc: string, basicPrice: number) {\n		this.description = desc;\n		this.price = basicPrice;\n	}\n\n	public getDesc(): string {\n		return "Maruthi => " + this.description;\n	}\n\n	public getPrice(): number {\n		return this.price;\n	}\n}\n\nclass HondaCity implements ICar {\n	private description: string = "";\n	private price: number = 0;\n\n	constructor(desc: string, basicPrice: number) {\n		this.description = desc;\n		this.price = basicPrice;\n	}\n\n	public getDesc(): string {\n		return "Honda => " + this.description ;\n	}\n\n	public getPrice(): number {\n		return this.price;\n	}\n}\n\nabstract class CarDecorator implements ICar {\n	description: string = "";\n	price: number = 0;\n	private _car: ICar;\n\n	constructor(car: ICar) {\n		this._car = car;\n	}\n\n	public getDesc(): string {\n		return this._car?.getDesc();\n	}\n\n	public getPrice(): number {\n		return this._car?.getPrice();\n	}\n}\n\nclass ColorDecorator extends CarDecorator {\n	constructor(car: ICar) {\n		super(car);\n	}\n\n	public getDesc(): string {\n		const desc: string = " Color Decorator";\n		return super.getDesc() + desc;\n	}\n\n	public getPrice(): number {\n		const price: number = 1000;\n		return super.getPrice() + price;\n	}\n}\n\nclass AudioDecorator extends CarDecorator {\n	constructor(car: ICar) {\n		super(car);\n	}\n\n	public getDesc(): string {\n		const desc: string = " Audio Decorator";\n		return super.getDesc() + desc;\n	}\n\n	public getPrice(): number {\n		const price: number = 2000;\n		return super.getPrice() + price;\n	}\n}\n\nconst clientCode = (car: ICar) => {\n	console.log("Result " + car.getDesc() + " = "  + car.getPrice()  )\n}\n\nconst mCar = new MaruthiCar("Maruthi Car", 200000);\nclientCode(mCar);\n\nconst mColorDec = new ColorDecorator(mCar);\nconst mAudioDec = new AudioDecorator(mColorDec);\nclientCode(mAudioDec);\n');break;case"facade":a('\n// Facade\ninterface ICustomer {\n	validate(): boolean;\n}\n\nclass Customer implements ICustomer {\n	private name: string = "";\n	constructor(name: string) {\n		this.name = name;\n	}\n\n	public validate(): boolean {\n		if (this.name.length > 2) {\n			return true;\n		}\n		return false;\n	}\n\n	public getSavingAmount(): number {\n		return 500000;\n	}\n\n	public getName(): string {\n		return this.name;\n	}\n}\n\nclass Bank implements ICustomer {\n	private _customer: Customer\n\n	constructor(cust: Customer) {\n		this._customer = cust;\n	}\n\n	public validate(): boolean {\n		return this.hasGoodSaving();\n	}\n\n	private hasGoodSaving(): boolean {\n		if (this._customer.getSavingAmount() >= 100000) {\n			return true;\n		}\n		return false;\n	}\n}\n\nclass BankLoan implements ICustomer {\n	private _customer: Customer;\n\n	constructor(cust: Customer) {\n		this._customer = cust;\n	}\n\n	public validate(): boolean {\n		return this.hasExistingLoan();\n	}\n\n	private hasExistingLoan(): boolean {\n		if (this._customer.getSavingAmount() >= 10000) {\n			return true;\n		}\n		return false;\n	}\n}\n\nclass MortgageFacade {\n	private customer: Customer;\n	private bank: Bank;\n	private bankLoan: BankLoan;\n\n	constructor(customer: Customer) {\n		this.customer = customer;\n		this.bank = new Bank(customer);\n		this.bankLoan = new BankLoan(customer);\n	}\n\n	public isEligible(): boolean {\n		if (!this.customer.validate()) {\n			return false;\n		}\n		if (!this.bank.validate()) {\n			return false;\n		}\n		if (!this.bankLoan.validate()) {\n			return false;\n		}\n		return true;\n	}\n\n	public getName(): string {\n		return this.customer.getName();\n	}\n}\n\nconst clientCode = () => {\n	const cust = new Customer("Baskaran");\n	const facade = new MortgageFacade(cust);\n	console.log("Facade isEligible => " + facade.getName() + " = " + facade.isEligible());\n}\n');break;case"flyweight":case"mediator":case"memento":a("In Progress");break;case"proxy":a('\n// Proxy\ninterface Internet {\n	connectTo(hostName: string): string;\n}\n\nclass Connection implements Internet {\n	public connectTo(hostName: string): string {\n		return "Connecting to " + hostName;\n	}\n}\n\nclass ProxyConnection implements Internet {\n	private _internet: Internet;\n	private _blockSites: Array<string> = [];\n\n	constructor() {\n		this._internet = new Connection();\n		this.blockSites();\n	}\n\n	public connectTo(hostName: string): string {\n		if (this._blockSites.includes(hostName)) {\n			return "Access Denied, the given hostName was blocked"\n		}\n		this._internet.connectTo(hostName);\n		return "Connected successfully";\n	}\n\n	private blockSites(): boolean {\n		this._blockSites = new Array<string>();\n		this._blockSites.push("123.com");\n		this._blockSites.push("xxx.com");\n		this._blockSites.push("xyz.com");\n		return true;\n	}\n}\n\nconst clientCode = () => {\n	const connect: Internet = new ProxyConnection();\n	let res = connect.connectTo("bjbaskar.github.io");\n	console.log("Resut => " + res)\n	res = connect.connectTo("xxx.com");\n	console.log("Resut => " + res)\n}\n');break;case"chainofresponsibility":a('\n// Chain Of Responsibilty\ninterface Employee {\n	name: string;\n	leaves: number;\n	status: string;\n}\n\ninterface IHandler {\n	setNextApprover(handler: IHandler): IHandler;\n	handle(employee: Employee): Employee | null;\n}\n\nabstract class ApproverHandler implements IHandler {\n	private _nextHandler: IHandler | null = null;\n\n	setNextApprover(appHandler: IHandler): IHandler {\n		this._nextHandler = appHandler\n		return appHandler;\n	}\n\n	public handle(employee: Employee): Employee | null {\n		if (this._nextHandler) {\n			this._nextHandler.handle(employee);\n		}\n		return employee;\n	}\n}\n\nclass EmployeeLeaveReq extends ApproverHandler {\n	constructor() {\n		super();\n	}\n	public handle(employee: Employee): Employee | null {\n		if (employee.leaves <= 5) {\n			employee.status = "Leave request has been sent to Team Lead";\n		}\n		return super.handle(employee);\n	}\n}\n\nclass ManagerLeaveReq extends ApproverHandler {\n	constructor() {\n		super();\n	}\n	public handle(employee: Employee): Employee | null {\n		if (employee.leaves > 5 && employee.leaves < 10) {\n			employee.status = "Leave request has been sent to HR manager";\n		}\n		return super.handle(employee);\n	}\n}\n\nclass HRLeaveReq extends ApproverHandler {\n	constructor() {\n		super();\n	}\n	public handle(employee: Employee): Employee | null {\n		if (employee.leaves >= 10) {\n			employee.status = "Leave request has been sent to Finance Department for deduction";\n		}\n		return super.handle(employee);\n	}\n}\n\nconst clientCode = () => {\n	const empReq: ApproverHandler = new EmployeeLeaveReq();\n	const mgrReq: ApproverHandler = new ManagerLeaveReq();\n	const hrReq: ApproverHandler = new HRLeaveReq();\n\n	empReq.setNextApprover(mgrReq).setNextApprover(hrReq);\n\n	let employee: Employee = {} as Employee;\n	employee.name = "Baskaran";\n	employee.leaves = 4;\n	employee.status = "Apply leave";\n\n	const res: Employee | null = empReq.handle(employee);\n\n	console.log("Result =>" + JSON.stringify(res));\n	return res;\n}\n');break;case"command":a('\n// Command\ninterface ICommand {\n	execute(): void;\n}\n\nclass DocumentReceiver {\n	public open(): void {\n		console.log("Doc Receiver - Open");\n	}\n\n	public read(): void {\n		console.log("Doc Receiver - Read");\n	}\n\n	public save(): void {\n		console.log("Doc Receiver - Save");\n	}\n}\n\nclass SaveCommand implements ICommand {\n	private docReceiver: DocumentReceiver;\n\n	constructor(docRec: DocumentReceiver) {\n		this.docReceiver = docRec;\n	}\n\n	public execute(): void {\n		console.log("Command - Save");\n		this.docReceiver.save();\n	}\n}\n\nclass OpenCommand implements ICommand {\n	private docReceiver: DocumentReceiver;\n\n	constructor(docRec: DocumentReceiver) {\n		this.docReceiver = docRec;\n	}\n\n	public execute(): void {\n		console.log("Command - Open");\n		this.docReceiver.open();\n	}\n}\n\nclass DocumentInvoker {\n	private _commands: { [id: string]: ICommand };\n	private _history: [number, string][];\n\n	constructor() {\n		this._commands = {};\n		this._history = [];\n	}\n\n	registerCommand(commandName: string, command: ICommand): void {\n		this._commands[commandName] = command;\n	}\n\n	showHistory(): void {\n		this._history.forEach((row) => {\n			console.log("Row "+ row[0]  +" => " + row[1] );\n		})\n	}\n\n	execute(commandName: string): void {\n		if (commandName in this._commands) {\n			this._commands[commandName].execute();\n			this._history.push([Date.now(), commandName]);\n		} else {\n			console.log("Command name " + commandName + " not recognised)\n		}\n	}\n\n	replayLast(numberOfCommands: number): void {\n		const command = this._history.slice(\n			this._history.length - numberOfCommands,\n			this._history.length\n		)\n		command.forEach((cmd) => {\n			this._commands[cmd[1]].execute();\n		})\n	}\n}\n\nconst clientCode = () => {\n	const rec = new DocumentReceiver();\n\n	const open = new OpenCommand(rec);\n	const save = new SaveCommand(rec);\n\n	const invoker = new DocumentInvoker();\n	invoker.registerCommand("OPEN", open);\n	invoker.registerCommand("SAVE", save);\n\n	invoker.execute("OPEN");\n	invoker.execute("SAVE");\n	invoker.execute("OPEN");\n	invoker.execute("SAVE");\n	invoker.execute("SAVE11");\n\n	invoker.showHistory();\n	invoker.replayLast(1);\n}\n');break;case"iterator":a('\n// iterator\ninterface IIterator<T> {\n	current(): T\n	next(): T;\n	hasNext(): boolean;\n	first(): T;\n	valid(): boolean;\n}\n\nclass Iterator implements IIterator<string> {\n	private _position: number = 0;\n	private _reverse: boolean = false;\n	private _collection: WordsCollection;\n\n	constructor(collection: WordsCollection, reverse: boolean = false) {\n		this._collection = collection;\n		this._reverse = reverse;\n\n		if (reverse) {\n			this._position = collection.getCount() - 1;\n		}\n	}\n\n	public current(): string {\n		const res = this._collection.getItems();\n		return res[this._position];\n	}\n	public next(): string {\n		const item = this.current();\n		this._position += this._reverse ? -1 : 1;\n		return item;\n	}\n	public hasNext(): boolean {\n		return this._position < this._collection.getCount();\n	}\n	public first(): string {\n		this._position = 0;\n		return this.next()\n	}\n	public valid(): boolean {\n		if (this._reverse) {\n			return this._position >= 0;\n		}\n\n		return this._position < this._collection.getCount();\n	}\n\n}\n\ninterface IAggregator {\n	getIterator(): IIterator<string>;\n}\n\nclass WordsCollection implements IAggregator {\n	private _items: Array<string> = [];\n\n	public getItems(): Array<string> {\n		return this._items;\n	}\n\n	public getCount(): number {\n		return this._items.length;\n	}\n\n	public addItem(item: string): void {\n		this._items.push(item);\n	}\n\n	public getIterator(): IIterator<string> {\n		return new Iterator(this);\n	}\n\n	public getReverseIterator(): IIterator<string> {\n		return new Iterator(this, true);\n	}\n}\n\nconst clientCode = () => {\n	const coll = new WordsCollection();\n	coll.addItem("Apple");\n	coll.addItem("ORange");\n	coll.addItem("Mango");\n	coll.addItem("Coconut");\n\n	const iterator = coll.getReverseIterator();\n\n	while (iterator.valid()) {\n		console.log(iterator.next())\n	}\n}\n');break;case"observer":a('\n// Observer\ninterface IDataViewObserver {\n	notify(data: number[]): void;\n	render(data: number[]): void;\n	delete(): void;\n}\n\nclass ChartView implements IDataViewObserver {\n\n	private _observable: IDataModelObservable;\n	private _id: number;\n\n	constructor(observable: IDataModelObservable) {\n		this._observable = observable;\n		this._id = this._observable.subscribe(this);\n	}\n\n	notify(data: number[]): void {\n		console.log("ChartView notify...")\n		this.render(data);\n	}\n	render(data: number[]): void {\n		console.log("ChartView rendering..." + JSON.stringify(data));\n	}\n	delete(): void {\n		this._observable.unsubscribe(this._id);\n	}\n}\n\nclass TableView implements IDataViewObserver {\n	private _observable: IDataModelObservable;\n	private _id: number;\n\n	constructor(observable: IDataModelObservable) {\n		this._observable = observable;\n		this._id = this._observable.subscribe(this);\n	}\n\n	notify(data: number[]): void {\n		console.log("TableView notify...")\n		this.render(data);\n	}\n	render(data: number[]): void {\n		console.log("TableView rendering..." + JSON.stringify(data));\n	}\n	delete(): void {\n		this._observable.unsubscribe(this._id);\n	}\n}\n\ninterface IDataModelObservable {\n	subscribe(observer: IDataViewObserver): number;\n	unsubscribe(observerID: number): void;\n	notify(data: number[]): void;\n}\n\nclass DataModel implements IDataModelObservable {\n\n	private _observers: { [id: number]: IDataViewObserver } = {};\n	private _counter: number;\n\n	constructor() {\n		this._counter = 0;\n	}\n\n	subscribe(observer: IDataViewObserver): number {\n		this._counter++;\n		this._observers[this._counter] = observer;\n		return this._counter;\n	}\n	unsubscribe(observerID: number): void {\n		delete this._observers[observerID];\n	}\n	notify(data: number[]): void {\n		Object.keys(this._observers).forEach((obr) => {\n			this._observers[parseInt(obr)].notify(data);\n		});\n	}\n}\n\nconst clientCode = () => {\n	const dataModel = new DataModel();\n	const chartView = new ChartView(dataModel);\n	const tableView = new TableView(dataModel);\n\n	dataModel.notify([1, 2, 3]);\n	tableView.delete();\n	dataModel.notify([5, 6, 7, 8, 9, 10]);\n}\n');break;case"state":a('\n// State\nabstract class EmployeeAppraisal {\n	depositPoints(points: number, context: AppraisalContext) {\n		context.statePoints = context.statePoints + points;\n		this.calculatePoints(context);\n	}\n	deductPoints(points: number, context: AppraisalContext) {\n		context.statePoints = context.statePoints - points;\n		this.calculatePoints(context);\n	}\n	calculatePoints(context: AppraisalContext) {\n		if (context.statePoints <= 20) {\n			context.setEmployeeAppraisal = new BelowExpectation();\n		} else if (context.statePoints > 20 && context.statePoints <= 60) {\n			context.setEmployeeAppraisal = new MeetsExpectation();\n		} else if (context.statePoints > 60) {\n			context.setEmployeeAppraisal = new Outstanding();\n		}\n	}\n	abstract getAppraisalState(): string;\n}\n\nclass Outstanding extends EmployeeAppraisal {\n	public getAppraisalState(): string {\n		return "Outstanding";\n	}\n}\n\nclass MeetsExpectation extends EmployeeAppraisal {\n	public getAppraisalState(): string {\n		return "Meets Expectation";\n	}\n}\n\nclass BelowExpectation extends EmployeeAppraisal {\n	public getAppraisalState(): string {\n		return "Below Expectation";\n	}\n}\n\nclass AppraisalContext {\n	private _apprState: EmployeeAppraisal;\n	private _appraisalPoints: number;\n\n	constructor() {\n		this._apprState = new BelowExpectation();\n		this._appraisalPoints = 10;\n	}\n\n	public depositPoints(points: number) {\n		this._apprState.depositPoints(points, this);\n	}\n\n	public deductPoints(points: number) {\n		this._apprState.deductPoints(points, this);\n	}\n\n	public get statePoints(): number {\n		return this._appraisalPoints;\n	}\n\n	public set statePoints(p: number) {\n		this._appraisalPoints = p;\n	}\n\n	public get setEmployeeAppraisal() {\n		return this._apprState;\n	}\n\n	public set setEmployeeAppraisal(obj: EmployeeAppraisal) {\n		this._apprState = obj;\n	}\n}\n\nconst clientCode = () => {\n	const emp = new AppraisalContext();\n	emp.depositPoints(15);\n	console.log(emp.statePoints + " => " + emp.setEmployeeAppraisal.getAppraisalState())\n	emp.deductPoints(35);\n	console.log(emp.statePoints + " => " + emp.setEmployeeAppraisal.getAppraisalState())\n}\n');break;case"strategy":a('\n// Strategy\nclass Invoice {\n	private _total: number = 0;\n	private _netPayable: NetPayable;\n\n	constructor(customerType: NetPayable) {\n		this._netPayable = customerType\n	}\n\n	public set NetPayableCustomer(v: NetPayable) {\n		this._netPayable = v;\n	}\n\n	public get grossAmount(): number {\n		return this._total;\n	}\n\n	public set grossAmount(v: number) {\n		this._total = v;\n	}\n\n	public getNetAmount(): number {\n		if (this._netPayable) {\n			return this._netPayable.calculateTotal(this);\n		} else {\n			throw new Error("Net Payable Customer has not assigned");\n		}\n	}\n\n}\n\nabstract class NetPayable {\n	abstract calculateTotal(inv: Invoice): number;\n}\n\nclass NormalCustomer extends NetPayable {\n	public calculateTotal(inv: Invoice): number {\n		return inv.grossAmount + (0.44 * inv.grossAmount);\n	}\n}\n\nclass SilverCustomer extends NetPayable {\n	public calculateTotal(inv: Invoice): number {\n		return inv.grossAmount + (0.20 * inv.grossAmount);\n	}\n}\n\nclass GoldenCustomer extends NetPayable {\n	public calculateTotal(inv: Invoice): number {\n		return inv.grossAmount + (0.08 * inv.grossAmount);\n	}\n}\n\nconst clientCode = () => {\n	const cust1 = new NormalCustomer();\n	const inv = new Invoice(cust1);\n	inv.grossAmount = 1000;\n	console.log("Base Customer => " + inv.getNetAmount())\n\n	inv.NetPayableCustomer = new SilverCustomer();\n	console.log("Silver Customer => " + inv.getNetAmount());\n	inv.NetPayableCustomer = new GoldenCustomer();\n	console.log("Golden Customer => " + inv.getNetAmount());\n}\n');break;case"templatemethod":a('\n// Template\ninterface IDocument {\n	[id: string]: string;\n}\n\nabstract class AbstractDocument {\n	document: IDocument = {};\n	abstract title(doc: IDocument): void;\n	abstract content(doc: IDocument, text: string): void;\n	author(doc: IDocument): void {\n		doc["author"] = "Baskaran";\n	}\n	print(doc: IDocument): void {\n		console.log("=-=-=-=-=-=-=-=-=-");\n		Object.keys(doc).forEach((attribute: string) => {\n			console.log("Attibute => " + attribute + "	" + doc[attribute]);\n		});\n		console.log("=-=-=-=-=-=-=-=-=-");\n	}\n	createDoc(text: string): void {\n		this.title(this.document);\n		this.content(this.document, text);\n		if (this.author) {\n			this.author(this.document);\n		}\n		this.print(this.document);\n	}\n}\n\nclass TextDocument extends AbstractDocument {\n	title(doc: IDocument,): void {\n		doc["title"] = " New Text Document"\n	}\n	content(doc: IDocument, text: string): void {\n		doc["content"] = text;\n	}\n	author(doc: IDocument) {\n		doc["author"] = "Baskaran B";\n	}\n}\n\nclass HTMLDocument extends AbstractDocument {\n	title(doc: IDocument): void {\n		doc["title"] = " New HTML Page"\n	}\n	content(doc: IDocument, text: string): void {\n		let html: string = "Title comes here \n";\n		html += "					<p>" + text + "</p>";\n		doc["content"] = html;\n	}\n\n}\n\nconst clientCode = () => {\n	const txt = new TextDocument();\n	txt.createDoc("God is Love");\n	const html = new HTMLDocument();\n	html.createDoc("God is Love");\n}\n');break;case"visitor":a("\n// Visitor\n		in progress.....\n\n		as of today 3 Jun 2020\n\n		pending tasks? \n			1. EA patterns\n			2. what do you mean by clean code\n			3. python version of design patterns working examples\n")}return()=>{}},[e]),(0,r.jsx)(l,{children:(0,r.jsx)("pre",{className:"px-8",children:(0,r.jsx)("code",{children:t})})})}}},function(n){n.O(0,[353,774,888,179],function(){return n(n.s=652)}),_N_E=n.O()}]);